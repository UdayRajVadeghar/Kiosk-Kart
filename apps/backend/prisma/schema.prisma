generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model cart_products {
  cart_id    String
  product_id String
  quantity   Int

  @@id([cart_id, product_id])
}

model carts {
  id         String   @id @default(cuid())
  user_id    String?  @unique
  users      users?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model categories {
  id                 String               @id @default(cuid())
  name               String               @unique
  created_at         DateTime?            @default(now())
  product_categories product_categories[]
}

model order_products {
  order_id   String
  product_id String
  quantity   Int
  price      Decimal
  orders     orders  @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([order_id, product_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model orders {
  id             String           @id @default(cuid())
  user_id        String?          @db.Uuid
  status         String?          @default("pending")
  total          Decimal?
  created_at     DateTime?        @default(now())
  order_products order_products[]
  payments       payments?

  @@index([user_id], map: "idx_orders_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model payments {
  id             String    @id @default(cuid())
  order_id       String?   @unique
  payment_method String?
  status         String?   @default("pending")
  created_at     DateTime? @default(now())
  orders         orders?   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model product_categories {
  product_id  String
  category_id String
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, category_id])
}

model products {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Decimal
  stock       Int
  image_url   String?
  seller_id   String
  seller_name String
  created_at  DateTime? @default(now())

  @@index([name], map: "idx_products_name")
}

model reviews {
  id         String    @id @default(cuid())
  user_id    String?
  product_id String?
  rating     Int?
  comment    String?
  created_at DateTime? @default(now())
}

model users {
  id            String    @id @default(cuid())
  name          String
  email         String
  password_hash String
  role          String?   @default("customer")
  created_at    DateTime? @default(now())
  carts         carts?
}
